# Use Ubuntu 24.04 as the base image.
FROM ubuntu:24.04

# Install system packages required for Rust and Python.
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    pkg-config \
    libssl-dev \
    patchelf \
    python3 python3-venv  python3-pip \
 && rm -rf /var/lib/apt/lists/*

# Install the Rust toolchain via rustup.
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
# Add Cargo's bin directory to PATH.
ENV PATH="/root/.cargo/bin:${PATH}"

# Install the uv package manager using its official install script.
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
# uv installs to /root/.local/bin; add that to PATH.
ENV PATH="/root/.local/bin:${PATH}"

# Set the working directory to /app.
WORKDIR /app

# Copy all the contents into our working directory
COPY . /app

# Activate the virtual environment by adding its bin directory to PATH.
ENV PATH="/app/.venv/bin:${PATH}"

# Install specific CPython versions into the venv (if needed).
RUN uv python install 3.12 3.13

# Create a virtual environment in /app/.venv using uv.
RUN uv venv 

# Use uv's pip to install maturin within the virtual environment.
RUN uv pip install maturin

# Set environment variable to let maturin build the PyO3 interface for Python 3.13
ENV PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1

# Build and install the Python extension using uv's maturin.
# Using "develop" installs the extension into the active venv.
RUN uv run maturin develop --release --features extension-module

# Build the Rust CLI executable.
RUN cargo build --release

# Copy the CLI executable to a directory in PATH.
# (Assumes your Cargo.toml [[bin]] entry names the binary "s3Rust-cli".)
RUN cp target/release/s3Rust-cli /usr/local/bin/s3Rust-cli

# Cleanup build artifacts
RUN rm -rf  /app/target/release/build /app/target/release/deps /app/src

RUN rm -rf  /app/Cargo.* *.sh

# Set the default entrypoint to bash for interactive testing.
CMD ["/bin/bash"]

